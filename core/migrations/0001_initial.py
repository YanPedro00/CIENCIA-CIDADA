# Generated by Django 4.2.7 on 2025-10-09 13:35

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipo', models.CharField(choices=[('professor', 'Professor'), ('estudante', 'Estudante')], default='estudante', max_length=20, verbose_name='Tipo de Usuário')),
                ('instituicao', models.CharField(blank=True, max_length=200, null=True, verbose_name='Instituição de Ensino')),
                ('telefone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('foto_perfil', models.ImageField(blank=True, null=True, upload_to='perfis/', verbose_name='Foto de Perfil')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['first_name', 'last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome do Grupo')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('lider', models.ForeignKey(blank=True, limit_choices_to={'tipo': 'estudante'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grupos_liderados', to=settings.AUTH_USER_MODEL, verbose_name='Líder do Grupo')),
                ('membros', models.ManyToManyField(limit_choices_to={'tipo': 'estudante'}, related_name='grupos', to=settings.AUTH_USER_MODEL, verbose_name='Membros')),
            ],
            options={
                'verbose_name': 'Grupo',
                'verbose_name_plural': 'Grupos',
                'ordering': ['turma', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Turma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome da Turma')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('codigo_acesso', models.CharField(editable=False, max_length=10, unique=True, verbose_name='Código de Acesso')),
                ('ano_semestre', models.CharField(help_text='Ex: 2024.1, 2024/2, 2024', max_length=20, verbose_name='Ano/Semestre')),
                ('max_grupos', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Máximo de Grupos')),
                ('max_membros_grupo', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(10)], verbose_name='Máximo de Membros por Grupo')),
                ('ativa', models.BooleanField(default=True, verbose_name='Turma Ativa')),
                ('criada_em', models.DateTimeField(auto_now_add=True)),
                ('atualizada_em', models.DateTimeField(auto_now=True)),
                ('professor', models.ForeignKey(limit_choices_to={'tipo': 'professor'}, on_delete=django.db.models.deletion.CASCADE, related_name='turmas_criadas', to=settings.AUTH_USER_MODEL, verbose_name='Professor Responsável')),
            ],
            options={
                'verbose_name': 'Turma',
                'verbose_name_plural': 'Turmas',
                'ordering': ['-criada_em'],
            },
        ),
        migrations.CreateModel(
            name='Projeto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=300, verbose_name='Título do Projeto')),
                ('slug', models.SlugField(editable=False, max_length=300, unique=True)),
                ('area_ciencia', models.CharField(choices=[('biologia', 'Biologia'), ('fisica', 'Física'), ('quimica', 'Química'), ('matematica', 'Matemática'), ('ciencias_ambientais', 'Ciências Ambientais'), ('ciencias_sociais', 'Ciências Sociais'), ('astronomia', 'Astronomia'), ('geologia', 'Geologia'), ('saude', 'Saúde'), ('tecnologia', 'Tecnologia'), ('outro', 'Outro')], max_length=50, verbose_name='Área da Ciência')),
                ('descricao_breve', models.TextField(help_text='Resumo do projeto em até 500 caracteres', max_length=500, verbose_name='Descrição Breve')),
                ('fase_atual', models.IntegerField(choices=[(1, 'Fase 1: Problema de Pesquisa'), (2, 'Fase 2: Hipótese'), (3, 'Fase 3: Metodologia'), (4, 'Fase 4: Coleta de Dados'), (5, 'Fase 5: Análise de Dados'), (6, 'Fase 6: Conclusão')], default=1, verbose_name='Fase Atual')),
                ('status', models.CharField(choices=[('rascunho', 'Rascunho'), ('em_andamento', 'Em Andamento'), ('aguardando_aprovacao', 'Aguardando Aprovação'), ('concluido', 'Concluído')], default='rascunho', max_length=30, verbose_name='Status')),
                ('fase1_pergunta', models.TextField(blank=True, help_text='Qual é a pergunta científica que vocês querem responder?', null=True, verbose_name='Pergunta de Pesquisa')),
                ('fase1_justificativa', models.TextField(blank=True, help_text='Por que essa pesquisa é importante?', null=True, verbose_name='Justificativa')),
                ('fase1_objetivos', models.TextField(blank=True, help_text='O que vocês esperam alcançar com esta pesquisa?', null=True, verbose_name='Objetivos')),
                ('fase1_aprovada', models.BooleanField(default=False, verbose_name='Fase 1 Aprovada')),
                ('fase1_aprovada_em', models.DateTimeField(blank=True, null=True)),
                ('fase2_hipotese_principal', models.TextField(blank=True, help_text='Qual é a resposta que vocês acreditam que vão encontrar?', null=True, verbose_name='Hipótese Principal')),
                ('fase2_fundamentacao', models.TextField(blank=True, help_text='Em que vocês basearam essa hipótese? Pesquisas anteriores, observações?', null=True, verbose_name='Fundamentação Teórica')),
                ('fase2_aprovada', models.BooleanField(default=False, verbose_name='Fase 2 Aprovada')),
                ('fase2_aprovada_em', models.DateTimeField(blank=True, null=True)),
                ('fase3_metodo_coleta', models.TextField(blank=True, help_text='Como vocês vão coletar os dados? Observação, experimento, questionário?', null=True, verbose_name='Método de Coleta de Dados')),
                ('fase3_materiais', models.TextField(blank=True, help_text='Quais materiais, equipamentos ou ferramentas vocês vão usar?', null=True, verbose_name='Materiais e Ferramentas')),
                ('fase3_cronograma', models.TextField(blank=True, help_text='Quando e por quanto tempo vocês vão coletar dados?', null=True, verbose_name='Cronograma')),
                ('fase3_local', models.CharField(blank=True, help_text='Onde a pesquisa será realizada?', max_length=300, null=True, verbose_name='Local da Pesquisa')),
                ('fase3_aprovada', models.BooleanField(default=False, verbose_name='Fase 3 Aprovada')),
                ('fase3_aprovada_em', models.DateTimeField(blank=True, null=True)),
                ('fase4_aprovada', models.BooleanField(default=False, verbose_name='Fase 4 Aprovada')),
                ('fase4_aprovada_em', models.DateTimeField(blank=True, null=True)),
                ('fase5_organizacao_dados', models.TextField(blank=True, help_text='Como vocês organizaram os dados coletados?', null=True, verbose_name='Organização dos Dados')),
                ('fase5_interpretacao', models.TextField(blank=True, help_text='O que os dados mostram? Quais padrões vocês identificaram?', null=True, verbose_name='Interpretação dos Resultados')),
                ('fase5_discussao', models.TextField(blank=True, help_text='O que esses resultados significam? Eles fazem sentido?', null=True, verbose_name='Discussão')),
                ('fase5_aprovada', models.BooleanField(default=False, verbose_name='Fase 5 Aprovada')),
                ('fase5_aprovada_em', models.DateTimeField(blank=True, null=True)),
                ('fase6_hipotese_confirmada', models.CharField(blank=True, choices=[('sim', 'Sim, confirmada'), ('parcial', 'Parcialmente confirmada'), ('nao', 'Não confirmada')], max_length=20, null=True, verbose_name='Hipótese Confirmada?')),
                ('fase6_conclusao', models.TextField(blank=True, help_text='Qual a resposta final para a pergunta de pesquisa?', null=True, verbose_name='Conclusão')),
                ('fase6_aprendizados', models.TextField(blank=True, help_text='O que vocês aprenderam com este projeto?', null=True, verbose_name='Aprendizados')),
                ('fase6_limitacoes', models.TextField(blank=True, help_text='Quais foram as dificuldades e limitações da pesquisa?', null=True, verbose_name='Limitações do Estudo')),
                ('fase6_aprovada', models.BooleanField(default=False, verbose_name='Fase 6 Aprovada')),
                ('fase6_aprovada_em', models.DateTimeField(blank=True, null=True)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('concluido_em', models.DateTimeField(blank=True, null=True)),
                ('grupo', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='projeto', to='core.grupo', verbose_name='Grupo')),
            ],
            options={
                'verbose_name': 'Projeto',
                'verbose_name_plural': 'Projetos',
                'ordering': ['-criado_em'],
            },
        ),
        migrations.CreateModel(
            name='Observacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200, verbose_name='Título')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('dados_json', models.JSONField(blank=True, help_text='Dados em formato JSON para flexibilidade', null=True, verbose_name='Dados Estruturados')),
                ('foto1', models.ImageField(blank=True, null=True, upload_to='observacoes/', verbose_name='Foto 1')),
                ('foto2', models.ImageField(blank=True, null=True, upload_to='observacoes/', verbose_name='Foto 2')),
                ('foto3', models.ImageField(blank=True, null=True, upload_to='observacoes/', verbose_name='Foto 3')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitude')),
                ('local_descricao', models.CharField(blank=True, max_length=300, null=True, verbose_name='Descrição do Local')),
                ('data_hora_coleta', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data e Hora da Coleta')),
                ('criada_em', models.DateTimeField(auto_now_add=True)),
                ('atualizada_em', models.DateTimeField(auto_now=True)),
                ('projeto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observacoes', to='core.projeto', verbose_name='Projeto')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observacoes', to=settings.AUTH_USER_MODEL, verbose_name='Coletado por')),
            ],
            options={
                'verbose_name': 'Observação',
                'verbose_name_plural': 'Observações',
                'ordering': ['-data_hora_coleta'],
            },
        ),
        migrations.AddField(
            model_name='grupo',
            name='turma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grupos', to='core.turma', verbose_name='Turma'),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fase', models.IntegerField(choices=[(1, 'Fase 1: Problema de Pesquisa'), (2, 'Fase 2: Hipótese'), (3, 'Fase 3: Metodologia'), (4, 'Fase 4: Coleta de Dados'), (5, 'Fase 5: Análise de Dados'), (6, 'Fase 6: Conclusão')], verbose_name='Fase')),
                ('comentario', models.TextField(verbose_name='Comentário')),
                ('aprovado', models.BooleanField(default=False, help_text='Marque se a fase está aprovada para o grupo avançar', verbose_name='Aprovado')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('professor', models.ForeignKey(limit_choices_to={'tipo': 'professor'}, on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks_dados', to=settings.AUTH_USER_MODEL, verbose_name='Professor')),
                ('projeto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.projeto', verbose_name='Projeto')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
                'ordering': ['-criado_em'],
            },
        ),
        migrations.CreateModel(
            name='Avaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conceito', models.CharField(choices=[('A', 'A - Excelente'), ('B', 'B - Bom'), ('C', 'C - Satisfatório'), ('D', 'D - Insuficiente')], max_length=1, verbose_name='Conceito')),
                ('nota_problema', models.IntegerField(help_text='0 a 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota - Definição do Problema')),
                ('nota_hipotese', models.IntegerField(help_text='0 a 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota - Hipótese')),
                ('nota_metodologia', models.IntegerField(help_text='0 a 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota - Metodologia')),
                ('nota_coleta', models.IntegerField(help_text='0 a 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota - Coleta de Dados')),
                ('nota_analise', models.IntegerField(help_text='0 a 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota - Análise')),
                ('nota_conclusao', models.IntegerField(help_text='0 a 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota - Conclusão')),
                ('comentarios', models.TextField(blank=True, null=True, verbose_name='Comentários Gerais')),
                ('pontos_fortes', models.TextField(blank=True, null=True, verbose_name='Pontos Fortes')),
                ('pontos_melhorar', models.TextField(blank=True, null=True, verbose_name='Pontos a Melhorar')),
                ('criada_em', models.DateTimeField(auto_now_add=True)),
                ('atualizada_em', models.DateTimeField(auto_now=True)),
                ('professor', models.ForeignKey(limit_choices_to={'tipo': 'professor'}, on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes_dadas', to=settings.AUTH_USER_MODEL, verbose_name='Professor')),
                ('projeto', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='avaliacao', to='core.projeto', verbose_name='Projeto')),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliações',
                'ordering': ['-criada_em'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='grupo',
            unique_together={('turma', 'nome')},
        ),
        migrations.CreateModel(
            name='EstudanteTurma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_entrada', models.DateTimeField(auto_now_add=True, verbose_name='Data de Entrada')),
                ('estudante', models.ForeignKey(limit_choices_to={'tipo': 'estudante'}, on_delete=django.db.models.deletion.CASCADE, related_name='turmas_estudante', to=settings.AUTH_USER_MODEL, verbose_name='Estudante')),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='estudantes', to='core.turma', verbose_name='Turma')),
            ],
            options={
                'verbose_name': 'Estudante-Turma',
                'verbose_name_plural': 'Estudantes-Turmas',
                'ordering': ['turma', 'data_entrada'],
                'unique_together': {('estudante', 'turma')},
            },
        ),
    ]
